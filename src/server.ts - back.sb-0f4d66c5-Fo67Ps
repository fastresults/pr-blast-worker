{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ Elysia \} from 'elysia';\
\
const app = new Elysia()\
  .get('/', () => \{\
    return \{ \
      message: 'PR on Blast! Worker is running! \uc0\u55357 \u56960 ',\
      status: 'healthy',\
      timestamp: new Date().toISOString()\
    \};\
  \})\
  .get('/health', () => \{\
    return \{ status: 'ok', service: 'pr-blast-worker' \};\
  \})\
  .ws('/ws', \{\
    open: (ws) => \{\
      console.log('WebSocket connection opened');\
      ws.send(JSON.stringify(\{ \
        type: 'connected', \
        message: 'Connected to PR on Blast! AI Worker' \
      \}));\
    \},\
    message: async (ws, message) => \{\
      try \{\
        console.log('Received message:', message);\
        const data = JSON.parse(message.toString());\
        \
        // Send acknowledgment\
        ws.send(JSON.stringify(\{\
          type: 'received',\
          message: 'Message received, processing...',\
          data: data\
        \}));\
        \
        // Simulate processing\
        setTimeout(() => \{\
          ws.send(JSON.stringify(\{\
            type: 'analysis_complete',\
            data: \{\
              journalists: [\
                \{\
                  id: 'test-1',\
                  name: 'Test Journalist',\
                  outlet: 'Tech News Daily',\
                  email: 'test@technews.com',\
                  beat: ['technology', 'startups'],\
                  recentArticles: ['Sample Article 1', 'Sample Article 2'],\
                  contactInfo: \{\
                    email: 'test@technews.com',\
                    twitter: 'https://twitter.com/testjournalist'\
                  \},\
                  enrichmentScore: 85\
                \}\
              ],\
              pitches: [\
                \{\
                  journalistId: 'test-1',\
                  subject: 'Test Pitch Subject',\
                  emailBody: 'This is a test pitch email body.',\
                  personalizedElements: ['Recent article reference'],\
                  confidence: 85\
                \}\
              ],\
              timestamp: new Date().toISOString()\
            \}\
          \}));\
        \}, 3000);\
        \
      \} catch (error) \{\
        console.error('Error processing message:', error);\
        ws.send(JSON.stringify(\{\
          type: 'error',\
          message: 'Failed to process message'\
        \}));\
      \}\
    \},\
    close: () => \{\
      console.log('WebSocket connection closed');\
    \}\
  \})\
  .listen(process.env.PORT || 3001);\
\
console.log(`\uc0\u55357 \u56960  PR on Blast! Worker running on port $\{app.server?.port\}`);\
console.log(`\uc0\u55357 \u56545  WebSocket endpoint: ws://localhost:$\{app.server?.port\}/ws`);}